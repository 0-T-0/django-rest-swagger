{
    "docs": [
        {
            "location": "/",
            "text": "Django REST Swagger\n\n\nSwagger/OpenAPI Documentation Generator for Django REST Framework\n\n\n\n\n\n\n\nNote:\n you are viewing documentation for version 2, using Django REST Framework 3.4+ and CoreAPI. Documentation for previous versions is available \nhere\n.\n\n\n\n\nInstallation\n\n\n$ pip install django-rest-swagger\n\n\nAdd \n'rest_framework_swagger'\n to \nINSTALLED_APPS\n in Django settings.\n\n\nsettings.py\n\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework_swagger',\n    ...\n]\n\n\n\n\nQuick start\n\n\nTo render the Swagger UI, set the Django REST Framework schema view renderer classes to include\n\nOpenAPIRenderer\n and the \nSwaggerUIRenderer\n classes from \nrest_framework_swagger.renderers\n.\n\n\nThe \nOpenAPIRenderer\n is responsible for generating the JSON spec, while the \nSwaggerUIRenderer\n renders\nthe UI.\n\n\nNote:\n to render the UI, both renderers must be included. The \nOpenAPIRenderer\n may be used on its own if you wish to host the UI independently.\n\n\nExample\n\n\nviews.py\n\n\nfrom rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import response, schemas\nfrom rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer\n\n\n@api_view()\n@renderer_classes([OpenAPIRenderer, SwaggerUIRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return response.Response(generator.get_schema(request=request))\n\n\n\n\n\n\nurls.py\n\n\nfrom django.conf.urls import url\nfrom views import schema_view\n\nurlpatterns = [\n    url('/', schema_view),\n    ...\n]\n\n\n\n\nView in the browser\n\n\n\n\nExample app\n\n\nAn example based on the \nDjango REST Tutorial\n ships with the project. It and can be optionally locally using Docker, or deployed for free on heroku.\n\n\nDeploy with Heroku\n\n\n\n\nLog in credentials are:\n\n\nusername: amy\npassword: amy\n\n\n\n\nDocker Instructions\n\n\nEnsure \nDocker\n Docker is installed on your system.\n\n\nFirst, clone the repository:\n\n\n$ git clone https://github.com/marcgibbons/django-rest-swagger\n\n\nTo quickly get up and running using the Docker image, simply run:\n\n\n$ ./run_example.sh\n\n\nThe initial run may take several minutes to build. Once complete, the \napplication will be available at \nhttp://localhost:8000\n\n\nLog in credentials are:\n\n\nusername: amy\npassword: amy\n\n\n\n\nChanges in 2.0\n\n\nVersion 2.0 is fundamentally different from previous versions and leverages the new schema generation features introduced in Django REST Framework 3.4. Introspection is performed by the framework and uses CoreAPI to store definitions. This is a breaking change from previous versions which were responsible for introspection as well as overrides.\n\n\nNew:\n\n\n\n\nSwaggerUI and the OpenAPI spec are renderer classes (simpler configuration)\n\n\nSwaggerUI 2.1.6\n\n\nImproved performance\n\n\nAllow multiple instances of Swagger UI in a single Django project\n\n\nAllow rendering the OpenAPI JSON spec independently\n\n\nImproved control of authentication mechanisms\n\n\n\n\nDeprecated:\n\n\n\n\nYAML docstrings\n\n\n\n\nLicense\n\n\nCopyright (c) 2013-2016, Marc Gibbons\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "Home"
        },
        {
            "location": "/#django-rest-swagger",
            "text": "Swagger/OpenAPI Documentation Generator for Django REST Framework    Note:  you are viewing documentation for version 2, using Django REST Framework 3.4+ and CoreAPI. Documentation for previous versions is available  here .",
            "title": "Django REST Swagger"
        },
        {
            "location": "/#installation",
            "text": "$ pip install django-rest-swagger  Add  'rest_framework_swagger'  to  INSTALLED_APPS  in Django settings.  settings.py  INSTALLED_APPS = [\n    ...\n    'rest_framework_swagger',\n    ...\n]",
            "title": "Installation"
        },
        {
            "location": "/#quick-start",
            "text": "To render the Swagger UI, set the Django REST Framework schema view renderer classes to include OpenAPIRenderer  and the  SwaggerUIRenderer  classes from  rest_framework_swagger.renderers .  The  OpenAPIRenderer  is responsible for generating the JSON spec, while the  SwaggerUIRenderer  renders\nthe UI.  Note:  to render the UI, both renderers must be included. The  OpenAPIRenderer  may be used on its own if you wish to host the UI independently.",
            "title": "Quick start"
        },
        {
            "location": "/#example",
            "text": "views.py  from rest_framework.decorators import api_view, renderer_classes\nfrom rest_framework import response, schemas\nfrom rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer\n\n\n@api_view()\n@renderer_classes([OpenAPIRenderer, SwaggerUIRenderer])\ndef schema_view(request):\n    generator = schemas.SchemaGenerator(title='Bookings API')\n    return response.Response(generator.get_schema(request=request))  urls.py  from django.conf.urls import url\nfrom views import schema_view\n\nurlpatterns = [\n    url('/', schema_view),\n    ...\n]",
            "title": "Example"
        },
        {
            "location": "/#view-in-the-browser",
            "text": "",
            "title": "View in the browser"
        },
        {
            "location": "/#example-app",
            "text": "An example based on the  Django REST Tutorial  ships with the project. It and can be optionally locally using Docker, or deployed for free on heroku.",
            "title": "Example app"
        },
        {
            "location": "/#deploy-with-heroku",
            "text": "Log in credentials are:  username: amy\npassword: amy",
            "title": "Deploy with Heroku"
        },
        {
            "location": "/#docker-instructions",
            "text": "Ensure  Docker  Docker is installed on your system.  First, clone the repository:  $ git clone https://github.com/marcgibbons/django-rest-swagger  To quickly get up and running using the Docker image, simply run:  $ ./run_example.sh  The initial run may take several minutes to build. Once complete, the \napplication will be available at  http://localhost:8000  Log in credentials are:  username: amy\npassword: amy",
            "title": "Docker Instructions"
        },
        {
            "location": "/#changes-in-20",
            "text": "Version 2.0 is fundamentally different from previous versions and leverages the new schema generation features introduced in Django REST Framework 3.4. Introspection is performed by the framework and uses CoreAPI to store definitions. This is a breaking change from previous versions which were responsible for introspection as well as overrides.  New:   SwaggerUI and the OpenAPI spec are renderer classes (simpler configuration)  SwaggerUI 2.1.6  Improved performance  Allow multiple instances of Swagger UI in a single Django project  Allow rendering the OpenAPI JSON spec independently  Improved control of authentication mechanisms   Deprecated:   YAML docstrings",
            "title": "Changes in 2.0"
        },
        {
            "location": "/#license",
            "text": "Copyright (c) 2013-2016, Marc Gibbons\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/customization/",
            "text": "Customization\n\n\nTemplate\n\n\nThe template used for the SwaggerUIRenderer can be customized by writing overriding\n\nrest_framework_swagger/index.html\n.\n\n\nHere are a few basic areas which can be customized:\n\n\n\n\n{% block extra_styles %}\n Add additional stylsheets\n\n\n{% block extra_scripts %}\n Add additional scripts.\n\n\n{% block user_context_message %}\n Customize the \"Hello, user\" message (Django session only)\n\n\n{% block extra_nav %}\n Placeholder for additional content in the nav bar.",
            "title": "Customization"
        },
        {
            "location": "/customization/#customization",
            "text": "",
            "title": "Customization"
        },
        {
            "location": "/customization/#template",
            "text": "The template used for the SwaggerUIRenderer can be customized by writing overriding rest_framework_swagger/index.html .  Here are a few basic areas which can be customized:   {% block extra_styles %}  Add additional stylsheets  {% block extra_scripts %}  Add additional scripts.  {% block user_context_message %}  Customize the \"Hello, user\" message (Django session only)  {% block extra_nav %}  Placeholder for additional content in the nav bar.",
            "title": "Template"
        },
        {
            "location": "/settings/",
            "text": "Settings\n\n\nThe configuration of Django REST Swagger is identical to Django REST Framework. Settings are configurable in \nsettings.py\n by defining \nSWAGGER_SETTINGS\n.\n\n\nExample:\n\n\nsettings.py\n\n\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'basic': {\n            'type': 'basic'\n        }\n    },\n    ...\n}\n\n\n\n\nAuthentication\n\n\nUSE_SESSION_AUTH\n\n\nToggles the use of Django Auth as an authentication mechanism. Setting it to \nTrue\n will display\na login/logout button on the Swagger UI and post csrf_tokens to the API.\n\n\nDefault:\n \nTrue\n\n\nNote:\n The login/logout button relies on the \nLOGIN_URL\n and \nLOGOUT_URL\n settings which default to \n/accounts/login\n. These can either be configured under \nSWAGGER_SETTINGS\n or Django settings.\n\n\nurls.py\n\n\nurlpatterns = [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n\n\n\n\nsettings.py\n\n\nLOGIN_URL = 'rest_framework:login'\nLOGOUT_URL = 'rest_framework:logout'\n\n\n\n\nLOGIN_URL\n\n\nThe URL to use to log in session authentication. Accepts named URL patterns.\n\n\nDefault:\n \ndjango.conf.settings.LOGIN_URL\n\n\nLOGOUT_URL\n\n\nThe URL to use to log out of session authentication. Accepts named URL patterns.\n\n\nDefault:\n \ndjango.conf.settings.LOGOUT_URL\n\n\nSECURITY_DEFINITIONS\n\n\nThe security definitions configures which authentication methods can be used by Swagger. The schemes types currently supported by the OpenAPI 2.0 spec are \nbasic\n, \napiKey\n and \noauth2\n.\n\n\nFor more information on available options, please consult the OpenAPI \nSecurity Object Definition\n.\n\n\nDefault:\n \n\n\n{\n    'basic': {\n        'type': 'basic'\n    }\n}\n\n\n\n\nSwaggerUI Settings\n\n\nBelow are some basic configuration settings for SwaggerUI. Note that for more advanced use cases, you may wish to write your own \nrest_framework_swagger/static/init.js\n file.\n\n\nAPIS_SORTER\n\n\nSet to \nalpha\n to enable alphabetical sorting.\n\n\nDefault:\n \nNone\n\n\nDOC_EXPANSION\n\n\nControls how the API listing is displayed. It can be set to:\n\n\n\n\nNone\n: All operations are collapsed\n\n\n\"list\"\n: Lists all the operations\n\n\n\"full\"\n: Expands all the operations\n\n\n\n\nDefault:\n \nNone\n\n\nJSON_EDITOR\n\n\nEnables a graphical view for editing complex bodies.\n\n\nDefault:\n \nFalse\n\n\nOPERATIONS_SORTER\n\n\nSorts the operation list of each API. It can be set to:\n\n\n\n\nalpha\n: Sort alphabetically\n\n\nmethod\n: Sort by HTTP method\n\n\n\n\nDefault:\n \nNone\n\n\nSHOW_REQUEST_HEADERS\n\n\nSet to \nTrue\n to display the request headers.\n\n\nDefault:\n \nFalse\n\n\nSUPPORTED_SUBMIT_METHOD\n\n\nA list of HTTP methods can be interacted with using the \"Try it out!\" button.\n\n\nDefault:\n \n['get', 'post', 'put', 'delete', 'patch']\n\n\nVALIDATOR_URL\n\n\nURL to swagger.io's online schema validator. Can be modified to point to a local\ninstall, or set to \nNone\n to disable.\n\n\nDefault:\n \nhttps://online.swagger.io/validator/",
            "title": "Settings"
        },
        {
            "location": "/settings/#settings",
            "text": "The configuration of Django REST Swagger is identical to Django REST Framework. Settings are configurable in  settings.py  by defining  SWAGGER_SETTINGS .  Example:  settings.py  SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'basic': {\n            'type': 'basic'\n        }\n    },\n    ...\n}",
            "title": "Settings"
        },
        {
            "location": "/settings/#authentication",
            "text": "",
            "title": "Authentication"
        },
        {
            "location": "/settings/#use_session_auth",
            "text": "Toggles the use of Django Auth as an authentication mechanism. Setting it to  True  will display\na login/logout button on the Swagger UI and post csrf_tokens to the API.  Default:   True  Note:  The login/logout button relies on the  LOGIN_URL  and  LOGOUT_URL  settings which default to  /accounts/login . These can either be configured under  SWAGGER_SETTINGS  or Django settings.  urls.py  urlpatterns = [\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]  settings.py  LOGIN_URL = 'rest_framework:login'\nLOGOUT_URL = 'rest_framework:logout'",
            "title": "USE_SESSION_AUTH"
        },
        {
            "location": "/settings/#login_url",
            "text": "The URL to use to log in session authentication. Accepts named URL patterns.  Default:   django.conf.settings.LOGIN_URL",
            "title": "LOGIN_URL"
        },
        {
            "location": "/settings/#logout_url",
            "text": "The URL to use to log out of session authentication. Accepts named URL patterns.  Default:   django.conf.settings.LOGOUT_URL",
            "title": "LOGOUT_URL"
        },
        {
            "location": "/settings/#security_definitions",
            "text": "The security definitions configures which authentication methods can be used by Swagger. The schemes types currently supported by the OpenAPI 2.0 spec are  basic ,  apiKey  and  oauth2 .  For more information on available options, please consult the OpenAPI  Security Object Definition .  Default:    {\n    'basic': {\n        'type': 'basic'\n    }\n}",
            "title": "SECURITY_DEFINITIONS"
        },
        {
            "location": "/settings/#swaggerui-settings",
            "text": "Below are some basic configuration settings for SwaggerUI. Note that for more advanced use cases, you may wish to write your own  rest_framework_swagger/static/init.js  file.",
            "title": "SwaggerUI Settings"
        },
        {
            "location": "/settings/#apis_sorter",
            "text": "Set to  alpha  to enable alphabetical sorting.  Default:   None",
            "title": "APIS_SORTER"
        },
        {
            "location": "/settings/#doc_expansion",
            "text": "Controls how the API listing is displayed. It can be set to:   None : All operations are collapsed  \"list\" : Lists all the operations  \"full\" : Expands all the operations   Default:   None",
            "title": "DOC_EXPANSION"
        },
        {
            "location": "/settings/#json_editor",
            "text": "Enables a graphical view for editing complex bodies.  Default:   False",
            "title": "JSON_EDITOR"
        },
        {
            "location": "/settings/#operations_sorter",
            "text": "Sorts the operation list of each API. It can be set to:   alpha : Sort alphabetically  method : Sort by HTTP method   Default:   None",
            "title": "OPERATIONS_SORTER"
        },
        {
            "location": "/settings/#show_request_headers",
            "text": "Set to  True  to display the request headers.  Default:   False",
            "title": "SHOW_REQUEST_HEADERS"
        },
        {
            "location": "/settings/#supported_submit_method",
            "text": "A list of HTTP methods can be interacted with using the \"Try it out!\" button.  Default:   ['get', 'post', 'put', 'delete', 'patch']",
            "title": "SUPPORTED_SUBMIT_METHOD"
        },
        {
            "location": "/settings/#validator_url",
            "text": "URL to swagger.io's online schema validator. Can be modified to point to a local\ninstall, or set to  None  to disable.  Default:   https://online.swagger.io/validator/",
            "title": "VALIDATOR_URL"
        }
    ]
}